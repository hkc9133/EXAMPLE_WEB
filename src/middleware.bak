// import {getToken} from "next-auth/jwt";
// import {NextRequest, NextResponse} from "next/server";
//
// const withAuthList = []
// const withOutAuthList = ["/auth/login","/auth/join"]
// const withAdminAuthList = ["/admin","/admin/:path*"]
//
// const withAuth = (req : NextRequest, accessToken: string) => {
//     const url = req.nextUrl.clone();
//     const { pathname } = req.nextUrl;
//
//     if(!accessToken) {
//         url.pathname = '/auth/login';
//         url.search = `callbackUrl=${pathname}`;
//
//         return NextResponse.redirect(url);
//     }
// }
//
// const withOutAuth = (req : NextRequest, accessToken: string, to:string | null) => {
//     const url = req.nextUrl.clone();
//     const { pathname } = req.nextUrl;
//
//     if(accessToken) {
//         url.pathname = to ?? "/";
//         url.search = '';
//
//         return NextResponse.redirect(url);
//     }
// }
//
// const withAdminAuth = (req : NextRequest, accessToken: string,role:string) => {
//     const url = req.nextUrl.clone();
//     const { pathname } = req.nextUrl;
//
//     if(!accessToken || role != "ROLE_ADMIN") {
//         url.pathname = '/auth/login';
//         url.search = `callbackUrl=${pathname}`;
//
//         return NextResponse.redirect(url);
//     }
// }
//
// export async function middleware(req: NextRequest) {
//     const { pathname } = req.nextUrl;
//
//     const excludePattern = /^\/(api|_next\/static|_next\/image|favicon.ico)/;
//
//     // 제외할 경로에 해당하면 그대로 넘어갑니다.
//     if (excludePattern.test(pathname)) {
//         return NextResponse.next();
//     }
//
//     const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
//
//     // 해당 pathname이 미리 정의해둔 withAuth, withOutAuth 배열 중 어디에 속하는지 확인
//     const isWithAuth = withAuthList.includes(pathname);
//     const isWithOutAuth = withOutAuthList.includes(pathname);
//     const isWithAdminAuth = withAdminAuthList.includes(pathname);
//
//     if (isWithAuth) return withAuth(req, !!token); // 로그인 여부에 따라 redirect 하는 함수
//     else if (isWithOutAuth) return withOutAuth(req, !!token); // 로그인 여부에 따라 redirect 하는 함수
//     else if (isWithAdminAuth) return withAdminAuth(req, !!token, token?.role); // 로그인 여부에 따라 redirect 하는 함수
// }
//
// // 미들웨어가 실행될 특정 pathname을 지정하면, 해당 pathname에서만 실행 가능
// export const config = {
//     matcher: [...withAdminAuthList,...withAuthList, ...withOutAuthList],
// }
